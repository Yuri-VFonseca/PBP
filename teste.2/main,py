import random, sys, os, re, csv

# Senhas
senha_funcionario = "chave"
senha_gerente = "senha"

# Criar cabeçalho

def header():
    if not os.path.exists("usuarios.csv"):
        with open("usuarios.csv", 'w', newline='', encoding="UTF-8") as file:
            writer = csv.writer(file)
            writer.writerow(["Nome", "Senha", "Tipo", "Número de login"])
    if not os.path.exists("produtos.csv"):
        with open("produtos.csv", 'w', newline='', encoding="UTF-8") as file:
            writer = csv.writer(file)
            writer.writerow(["Nome", "Preço", "Quantidade", "Código"])
header()

# Validador de senha

def senha_valida(chave):
    if (len(chave) >= 8 and re.search(r"\d", chave) and re.search(r"[!@#$%¨&*()_\-=+§.,><;:{}ªº\|]", chave) and re.search(r"[A-Z]", chave) and re.search(r"[a-z]", chave)):
        return True
    return False

# Função para verificar se o número de login ou código já existe

def numero_login_unico(novo_n_login):
    with open('usuarios.csv', 'r', newline='', encoding="UTF-8") as file:
        reader = csv.reader(file)
        next(reader, None)
        for linha in reader:
            if len(linha) != 4:
                continue
            _, _, _, n_login = linha
            if str(n_login) == str(novo_n_login):
                return False  # Login duplicado
    return True
def numero_codigo_unico(novo_n_codigo):
    with open('produtos.csv', 'r', newline='', encoding="UTF-8") as file:
        reader = csv.reader(file)
        next(reader, None)
        for linha in reader:
            if len(linha) != 4:
                continue
            _, _, _, n_login = linha
            if str(n_login) == str(novo_n_codigo):
                return False  # Login duplicado
    return True

# Função para verificar se o nome já existe

def verifica_nome_usuario(nome): 
    with open("usuarios.csv", 'r', newline='', encoding="UTF-8") as file: 
        reader = csv.reader(file)
        next(reader, None)
        for linha in reader: 
            if len(linha) != 4: 
                continue
            nome_verificado, _, _, _, = linha
            if nome_verificado.lower() == nome.lower(): 
                return False
    return True

def verifica_nome_produto(nome): 
    with open("produtos.csv", 'r', newline='', encoding='UTF-8') as file:
        reader = csv.reader(file)
        next(reader, None)
        for linha in reader: 
            if len(linha) != 4: 
                continue
            nome_verificado, _, _, _, = linha
            if nome_verificado.lower() == nome.lower():
                return False
    return True

# Criador de usuário

def create_usuario(nome, senha, opcao):
    if not verifica_nome_usuario(nome): 
        print("Erro: Nome de usuário já existe. Escolha outro")
        return None
    elif opcao == 2:
        if not senha_valida(senha):
            return None
        tipo = "usuario"
        n_login = random.randint(100, 999)
        while not numero_login_unico(n_login):
            n_login = random.randint(100, 999)
    elif opcao == 3:
        if senha != senha_funcionario:
            return None
        tipo = "funcionario"
        while not numero_login_unico(n_login): 
           n_login = random.randint(10, 99)
    elif opcao == 4:
        if senha != senha_gerente:
            return None
        tipo = "gerente"
        while not numero_login_unico(n_login): 
            n_login = random.randint(1, 9)
    else:
        print("Opção inválida")
        return None
    usuario = [nome, senha, tipo, n_login]
    with open("usuarios.csv", 'a', newline='', encoding="UTF-8") as file:
        writer = csv.writer(file)
        writer.writerow(usuario)
    return True

# Ler usuário

def buscar_usuario(chave, senha=None):
    with open('usuarios.csv', 'r', newline='', encoding="UTF-8") as file:
        reader = csv.reader(file)
        next(reader, None)
        for linha in reader:
            if len(linha) != 4:
                continue
            nome, senha_armazenada, tipo, n_login = linha
            if chave == nome or str(n_login) == str(chave):
                if senha == None:
                    print("Senha não fornecida")
                    return None
                if senha == senha_armazenada: 
                    return {"Nome": nome, "Tipo": tipo, "Número de login": n_login}
                else:
                    print("Senha incorreta")
                    return None
        print("Usuário não encontrado")
        return None
    
# Atualizar usuário

def update_usuario(chave, senha, novo_nome=None, novo_n_login=None, usuario_logado=None):
    usuario = buscar_usuario(chave, senha)
    if usuario is None:
        print("Usuário não encontrado")
        return
    if usuario["Tipo"] == "usuario":
        if usuario_logado["Nome"] != usuario["Nome"]: # Aconteceu um erro, onde ao editar o mesmo usuário duas vezes é negado o acesso
            print("Você não tem permissão para alterar o perfil de outro usuário")
            return
        if novo_nome:
            usuario["Nome"] = novo_nome
        if novo_n_login:
            if numero_login_unico(novo_n_login) and novo_n_login < 1000:
                usuario["Número de login"] = novo_n_login
            else:
                print("Número de login já existe. Não é possível alterar ou é maior que 1000.")
                return
    elif usuario_logado["Tipo"] == "funcionario":
        if usuario_logado["Nome"] != usuario["Nome"] and usuario["Tipo"] in ["funcionario", "gerente"]:
            print("Você não tem permissão para alterar o perfil de outro funcionário ou gerente")
            return
        if novo_nome:
            usuario["Nome"] = novo_nome
        if novo_n_login:
            if numero_login_unico(novo_n_login) and novo_n_login < 100:
                usuario["Número de login"] = novo_n_login
            else:
                print("Número de login já existe, ou é maior que 100. Não é possível alterar.")
                return
    elif usuario_logado["Tipo"] == "gerente":
        if novo_nome:
            usuario["Nome"] = novo_nome
        if novo_n_login:
            if numero_login_unico(novo_n_login) and novo_n_login < 10:
                usuario["Número de login"] = novo_n_login
            else:
                print("Número de login já existe, ou é maior que 10. Não é possível alterar.")
                return
    # Atualizar no arquivo CSV
    usuarios_atualizados = []
    with open('usuarios.csv', 'r', newline='', encoding="UTF-8") as file:
        reader = csv.reader(file)
        next(reader, None)
        for linha in reader:
            if len(linha) != 4:
                continue
            nome, senha_atual, tipo, n_login = linha
            if nome == usuario["Nome"] or str(n_login) == str(usuario["Número de login"]):
                if novo_nome:
                    nome = novo_nome
                if novo_n_login:
                    n_login = novo_n_login
            usuarios_atualizados.append([nome, senha_atual, tipo, n_login])

    with open('usuarios.csv', 'w', newline='', encoding="UTF-8") as file:
        writer = csv.writer(file)
        writer.writerow(['Nome', 'Senha', 'Tipo', 'Número de login'])
        writer.writerows(usuarios_atualizados)
        
# Delete usuário

def delete_usuario(chave, senha, usuario_logado): 
    usuario = buscar_usuario(chave, senha)
    if usuario is None: 
        print("Usuário não encontrado")
        return

    # Verificação de permissões
    if usuario_logado["Tipo"] == "usuario": 
        if usuario_logado["Nome"] != usuario["Nome"]: 
            print("Você não tem permissão para deletar o perfil de outro usuário")
            return
    elif usuario_logado["Tipo"] == "funcionario": 
        if usuario["Tipo"] in ["funcionario", "gerente"]: 
            print("Você não tem permissão para deletar o perfil de outro funcionário ou gerente")
            return
    elif usuario_logado["Tipo"] == "gerente": 
        if usuario["Tipo"] == "gerente": 
            print("Gerentes não podem deletar outros gerentes")
            return

    # Deletar o usuário
    usuarios_atualizados = []
    with open('usuarios.csv', 'r', newline='', encoding="UTF-8") as file:
        reader = csv.reader(file)
        next(reader, None)
        for linha in reader:
            if len(linha) != 4: 
                continue
            nome, senha_armazenada, tipo, n_login = linha
            # Se o nome ou número de login corresponde ao usuário a ser deletado, ele será ignorado
            if nome == usuario["Nome"] or str(n_login) == str(usuario["Número de login"]): 
                continue
            usuarios_atualizados.append(linha)

    # Escrever os dados atualizados de volta no arquivo CSV
    with open('usuarios.csv', 'w', newline='', encoding="UTF-8") as file:
        writer = csv.writer(file)
        writer.writerow(['Nome', 'Senha', 'Tipo', 'Número de login'])
        writer.writerows(usuarios_atualizados)


# Produtos

# Criar produto

def create_produto(nome, preco, quantidade):
    if not verifica_nome_produto(nome): 
        print("Erro: Produto já existe. Escolha outro nome")
        return None
    codigo = random.randint(100000000, 999999999)
    while not numero_codigo_unico(codigo): 
        codigo = random.randint(100000000, 999999999)
    usuario = [nome, preco, quantidade, codigo]
    with open("produtos.csv", 'a', newline='', encoding="UTF-8") as file:
        writer = csv.writer(file)
        writer.writerow(usuario)

# Buscar produto

def buscar_produto(chave): 
    produto = None
    with open("produtos.csv", 'r', newline='', encoding="UTF-8") as file: 
        reader = csv.reader(file)
        next(reader,None)
        for linha in reader: 
            if len(linha) != 4: 
                continue
            nome, preco, quantidade, codigo = linha
            if chave == str(nome).lower() or chave == int(codigo): 
                return {"Nome": nome, "Preço": preco, "Quantidade": quantidade, "Código": codigo}
    return None

# Atualizar produto

def atualizar_produto(chave, nome=None, preco=None, quantidade=None, usuario_tipo="usuario"):
    if usuario_tipo == "usuario": 
        print("Você não tem permissão para alterar produtos")
        return None
    elif usuario_tipo == "funcionario": 
        if nome or preco: 
            print("Funcionários podem alterar apenas a quantidade")
            return
        else: 
            pass
    elif usuario_tipo == "gerente": 
        pass
    else: 
        print("ERROR")
        return None
    produtos_atualizados = []
    with open('produtos.csv', 'r', newline='', encoding="UTF-8") as file: 
        reader = csv.reader(file)
        next(reader, None)
        for linha in reader: 
            if len(linha) != 4:
                continue
            nome_produto, preco_atual, quantidade_atual, codigo = linha
            if chave == nome_produto or chave == int(codigo): 
                if nome: 
                    nome_produto = nome
                if preco is not None: 
                    preco_atual = preco
                if quantidade is not None: 
                    quantidade_atual = quantidade + int(quantidade_atual)
            produtos_atualizados.append([nome_produto, preco_atual, quantidade_atual, codigo])
    with open('produtos.csv', 'w', newline='', encoding="UTF-8") as file: 
        writer = csv.writer(file)
        writer.writerow(['Nome', 'Preço', 'Quantidade', 'Código'])
        writer.writerow(produtos_atualizados)

# Deletar produto

def deletar_produto(chave): 
    produtos_atualizados = []
    with open("produtos.csv", 'r', newline='', encoding="UTF-8") as file: 
        reader = csv.DictReader(file)
        for linha in reader: 
            if linha["Nome"].lower() == chave.lower() or linha["Código"] == str(chave): 
                continue
            produtos_atualizados.append(linha) 
    with open('produtos.csv', 'w', newline='', encoding="UTF-8") as file: 
        fieldnames = ["Nome", "Preço", "Quantidade", "Código"]
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(produtos_atualizados)

# Menus

def menu_usuario():
    usuario_logado = None  # Variável para o usuário logado
    while True:
        print("----- Menu de Usuário -----")
        print("1 - Logar usuário")
        print("2 - Criar usuário")
        print("3 - Criar funcionário")
        print("4 - Criar gerente")
        print("5 - Editar perfil")
        print("6 - Deletar perfil")
        print("7 - Seguir para menu produtos (é necessário estar logado)")
        print("0 - Sair")
        try:
            opcao = int(input("Opção: "))
        except ValueError:
            print("Escolha uma opção válida")
            continue
        if opcao == 0:
            print("ENCERRADO")
            break
        elif opcao == 1:
            nome = input("Digite o nome: ")
            senha = input("Digite a senha: ")
            usuario = buscar_usuario(nome, senha)
            if usuario:
                usuario_logado = usuario
                print(f"Bem-vindo, {usuario['Nome']}!")
            else:
                print("Usuário não encontrado ou senha incorreta")
        elif opcao == 2:
            nome = input("Digite o nome: ")
            senha = input("Digite a senha: ")
            if create_usuario(nome, senha, opcao):
                print(f"Usuário {nome} criado com sucesso!")
            else:
                print("Erro ao criar usuário, verifique a senha ou a opção selecionada")
        elif opcao == 3 and usuario_logado["Tipo"] in ["funcionario", "gerente"]:
            nome = input("Digite o nome: ")
            senha = input("Digite a senha do funcionário: ")
            if create_usuario(nome, senha, opcao):
                print(f"Funcionário {nome} criado com sucesso!")
            else:
                print("Erro ao criar funcionário, verifique a senha ou a opção selecionada")
        elif opcao == 4:
            nome = input("Digite o nome: ")
            senha = input("Digite a senha do gerente: ")
            if create_usuario(nome, senha, opcao):
                print(f"Gerente {nome} criado com sucesso!")
            else:
                print("Erro ao criar gerente, verifique a senha ou a opção selecionada")
        elif opcao == 5:
            if usuario_logado:
                nome = input("Digite o nome para edição: ")
                senha = input("Digite a senha: ")
                novo_nome = input("Novo nome (pressiona Enter para não alterar): ")
                novo_n_login = input("Novo número de login (pressione Enter para não alterar): ")
                update_usuario(nome, senha, novo_nome or None, novo_n_login or None, usuario_logado)
                if buscar_usuario == nome: 
                    print(f"Usuário alterado com sucesso!")
                else: 
                    print("Não foi possível editar")
            else:
                print("Você precisa estar logado para editar o perfil")
        elif opcao == 6:
            nome = input("Digite o nome: ")
            senha = input("Digite a senha: ")
            usuario_logado = buscar_usuario(nome, senha)
            if usuario_logado: 
                delete_usuario(nome, senha, usuario_logado)
                print(f"Usuário {nome} deletado com sucesso!")
            else: 
                print("Usuário não encontrado ou senha incorreta")
        elif opcao == 7: 
            menu_produtos(usuario_logado)
        else:
            print("Escolha uma opção válida")

def menu_produtos(usuario_logado):
    while True:
        print("----- Menu de produtos ------")
        print("1 - Buscar produto")
        if usuario_logado["Tipo"] in ['funcionario', 'gerente']:
            print("2 - Adicionar novo produto")
            print("3 - Editar produto")
            print("4 - Deletar produto")
        print("0 - Sair")
        try:
            opcao = int(input("Opção: "))
        except ValueError:
            print("Escolha uma opção válida")
            continue
        
        if opcao == 0:
            print("Encerrando o menu de produtos...")
            break
        elif opcao == 1:
            chave_produto = input("Digite o nome ou código do produto que deseja buscar: ")
            produto = buscar_produto(chave_produto)
            if produto:
                print(produto)
            else:
                print("Produto não encontrado")
        elif opcao == 2 and usuario_logado["Tipo"] == "gerente":
            print(f"Bem-vindo ao menu de criação, {usuario_logado['Nome']}")
            nome_produto = input("Digite o nome do produto: ")
            preco = float(input("Preço do produto: "))
            quantidade = int(input("Quantidade inicial: "))
            create_produto(nome_produto, preco, quantidade)
            print("Produto adicionado com sucesso!")
        elif opcao == 3 and usuario_logado["Tipo"] in ["funcionario", 'gerente']:
            print(f"Bem-vindo ao menu de edição, {usuario_logado['Nome']}")
            chave_produto = input("Digite o nome ou código do produto que deseja editar: ").lower()
            produto = buscar_produto(chave_produto)
            if produto:
                print("1 - Adicionar estoque")
                print("2 - Reduzir estoque")
                print("3 - Alterar preço")
                print("4 - Alterar nome")
                try:
                    opcao_editar = int(input("Opção: "))
                except ValueError:
                    print("Escolha uma opção válida")
                    continue

                if opcao_editar == 1:
                    try:
                        quantidade = int(input("Digite a quantidade a ser adicionada: "))
                        atualizar_produto(produto["Código"], quantidade=quantidade)
                        print(f"Estoque de {produto['Nome']} atualizado! Quantidade adicionada: {quantidade}")
                    except ValueError:
                        print("Quantidade inválida!")
                elif opcao_editar == 2:
                    try:
                        quantidade = int(input("Digite a quantidade a ser reduzida: "))
                        if produto["Quantidade"] >= quantidade:
                            atualizar_produto(produto["Código"], quantidade=-quantidade)
                            print(f"Estoque de {produto['Nome']} atualizado! Quantidade reduzida: {quantidade}")
                        else:
                            print("Não há estoque suficiente para reduzir essa quantidade")
                    except ValueError:
                        print("Quantidade inválida!")
                elif opcao_editar == 3:
                    try:
                        preco = float(input("Digite o novo preço: "))
                        if preco >= 0:
                            atualizar_produto(produto["Código"], preco=preco)
                            print(f"Preço de {produto['Nome']} atualizado!")
                        else:
                            print("O novo preço não pode ser menor que 0")
                    except ValueError:
                        print("Preço inválido!")
                elif opcao_editar == 4:
                    novo_nome = input("Digite o novo nome: ")
                    atualizar_produto(produto["Código"], nome=novo_nome)
                    print(f"Nome de {produto['Nome']} atualizado para {novo_nome}")
                else:
                    print("Escolha uma opção válida")
            else:
                print("Produto não encontrado")
        elif opcao == 4 and usuario_logado["Tipo"] == "gerente":
            nome_produto = input("Digite o nome ou código do produto que deseja deletar: ").lower()
            produto = buscar_produto(nome_produto)
            if produto: 
                print("Deseja apagar o produto?")
                print("1 - SIM")
                print("2 - NÃO")
                opcao = int(input())
                if opcao == 1: 
                    deletar_produto(produto["Código"])
                    print("Produto deletado com sucesso!")
                if opcao == 2: 
                    print("Produto não foi deletado")
            else: 
                print("Produto não encontrado")
        else:
            print("Escolha uma opção válida")
menu_usuario()